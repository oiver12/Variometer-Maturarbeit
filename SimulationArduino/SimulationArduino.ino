#include "LinearRegression.h"
#include "Variometer.h"
#include "FiFo.h"

#include <Kalman.h>
using namespace BLA;

#define Nstate 3 // position, speed, acceleration
#define Nobs 2   // position, acceleration

// measurement std
#define n_p 1
#define n_a 0.0069
//Process Noise
#define n_r_a 0.3

//vom C# Projekt 
double times[400] = { 0, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.32, 0.36, 0.4, 0.44, 0.48, 0.52, 0.56, 0.6, 0.64, 0.68, 0.72, 0.76, 0.8, 0.84, 0.88, 0.92, 0.96, 1, 1.04, 1.08, 1.12, 1.16, 1.2, 1.24, 1.28, 1.32, 1.36, 1.4, 1.44, 1.48, 1.52, 1.56, 1.6, 1.64, 1.68, 1.72, 1.76, 1.8, 1.84, 1.88, 1.92, 1.96, 2, 2.04, 2.08, 2.12, 2.16, 2.2, 2.24, 2.28, 2.32, 2.36, 2.4, 2.44, 2.48, 2.52, 2.56, 2.6, 2.64, 2.68, 2.72, 2.76, 2.8, 2.84, 2.88, 2.92, 2.96, 3, 3.04, 3.08, 3.12, 3.16, 3.2, 3.24, 3.28, 3.32, 3.36, 3.4, 3.44, 3.48, 3.52, 3.56, 3.6, 3.64, 3.68, 3.72, 3.76, 3.8, 3.84, 3.88, 3.92, 3.96, 4, 4.04, 4.08, 4.12, 4.16, 4.2, 4.24, 4.28, 4.32, 4.36, 4.4, 4.44, 4.48, 4.52, 4.56, 4.6, 4.64, 4.68, 4.72, 4.76, 4.8, 4.84, 4.88, 4.92, 4.96, 5, 5.04, 5.08, 5.12, 5.16, 5.2, 5.24, 5.28, 5.32, 5.36, 5.4, 5.44, 5.48, 5.52, 5.56, 5.6, 5.64, 5.68, 5.72, 5.76, 5.8, 5.84, 5.88, 5.92, 5.96, 6, 6.04, 6.08, 6.12, 6.16, 6.2, 6.24, 6.28, 6.32, 6.36, 6.4, 6.44, 6.48, 6.52, 6.56, 6.6, 6.64, 6.68, 6.72, 6.76, 6.8, 6.84, 6.88, 6.92, 6.96, 7, 7.04, 7.08, 7.12, 7.16, 7.2, 7.24, 7.28, 7.32, 7.36, 7.4, 7.44, 7.48, 7.52, 7.56, 7.6, 7.64, 7.68, 7.72, 7.76, 7.8, 7.84, 7.88, 7.92, 7.96, 8, 8.04, 8.08, 8.12, 8.16, 8.2, 8.24, 8.28, 8.32, 8.36, 8.4, 8.44, 8.48, 8.52, 8.559999, 8.599999, 8.639999, 8.679999, 8.72, 8.76, 8.8, 8.84, 8.88, 8.92, 8.96, 9, 9.04, 9.08, 9.12, 9.16, 9.2, 9.24, 9.28, 9.32, 9.36, 9.4, 9.44, 9.48, 9.52, 9.559999, 9.599999, 9.639999, 9.679999, 9.719999, 9.76, 9.8, 9.84, 9.88, 9.92, 9.96, 10, 10.04, 10.08, 10.12, 10.16, 10.2, 10.24, 10.28, 10.32, 10.36, 10.4, 10.44, 10.48, 10.52, 10.56, 10.6, 10.64, 10.68, 10.72, 10.76, 10.8, 10.84, 10.88, 10.92, 10.96, 11, 11.04, 11.08, 11.12, 11.16, 11.2, 11.24, 11.28, 11.32, 11.36, 11.4, 11.44, 11.48, 11.52, 11.56, 11.6, 11.64, 11.68, 11.72, 11.76, 11.8, 11.84, 11.88, 11.92, 11.96, 12, 12.04, 12.08, 12.12, 12.16, 12.2, 12.24, 12.28, 12.32, 12.36, 12.4, 12.44, 12.48, 12.52, 12.56, 12.6, 12.64, 12.68, 12.72, 12.76, 12.8, 12.84, 12.88, 12.92, 12.96, 13, 13.04, 13.08, 13.12, 13.16, 13.2, 13.24, 13.28, 13.32, 13.36, 13.4, 13.44, 13.48, 13.52, 13.56, 13.6, 13.64, 13.68, 13.72, 13.76, 13.8, 13.84, 13.88, 13.92, 13.96, 14, 14.04, 14.08, 14.12, 14.16, 14.2, 14.24, 14.28, 14.32, 14.36, 14.4, 14.44, 14.48, 14.52, 14.56, 14.6, 14.64, 14.68, 14.72, 14.76, 14.8, 14.84, 14.88, 14.92, 14.96, 15, 15.04, 15.08, 15.12, 15.16, 15.2, 15.24, 15.28, 15.32, 15.36, 15.4, 15.44, 15.48, 15.52, 15.56, 15.6, 15.64, 15.68, 15.72, 15.76, 15.8, 15.84, 15.88, 15.92, 15.96,  };
double measHeights[400] = { 0.05791463, 0.1508607, 0.0176094, 0.2507104, 0.255769, -0.02406547, 0.04940089, -0.2109175, 0.05547738, -0.02096431, 0.2185712, 0.2362964, 0.02351525, 0.3350466, 0.1017719, 0.1114278, 0.1262219, 0.341597, -0.02988917, -0.008455324, 0.166854, 0.4419274, 0.2064982, 0.3335462, 0.4969494, -0.04039492, 0.3105904, 0.3808105, 0.6541197, 0.2733604, 0.2639828, 0.4454752, 0.3374308, 0.2201971, 0.504463, 0.5063494, 0.3973946, 0.3507266, 0.6429451, 0.4817338, 0.4772, 0.5111127, 0.5895954, 0.5825529, 0.5504015, 0.7236356, 0.6793146, 0.8455327, 0.7862628, 0.8096167, 0.5202679, 0.8781793, 0.8752972, 0.8703319, 0.7458153, 1.00247, 1.128089, 1.003576, 1.067091, 0.7243833, 0.9885595, 0.8550947, 1.189847, 0.9496209, 1.062389, 1.099398, 1.079306, 1.488773, 1.341914, 1.278286, 1.224912, 1.230932, 1.389955, 1.257229, 1.241011, 1.501796, 1.553794, 1.653422, 1.682299, 1.812547, 1.546869, 1.396547, 1.639548, 1.738564, 1.721843, 1.83708, 1.924994, 1.75109, 1.999119, 1.639035, 2.058122, 1.668773, 1.829888, 1.96896, 1.989702, 2.09292, 2.180611, 2.201232, 2.113286, 2.303018, 2.2349, 2.352461, 2.468921, 2.165798, 2.437406, 2.332265, 2.398427, 2.123565, 2.39325, 2.48706, 2.473166, 2.450652, 2.245563, 2.454384, 2.558805, 2.59647, 2.709414, 2.664399, 2.262111, 2.570215, 2.561468, 2.766522, 2.54871, 2.742409, 2.731386, 2.759758, 2.852657, 2.639544, 3.004211, 2.98213, 2.75448, 2.733841, 2.919668, 2.665785, 2.670768, 3.051795, 2.994029, 2.512573, 3.072986, 2.993437, 2.77593, 2.84692, 3.015929, 3.069355, 3.018773, 3.051976, 3.006666, 3.073854, 2.915426, 3.438733, 2.850085, 3.149635, 3.009001, 3.025316, 3.171338, 3.265868, 3.357637, 3.177191, 3.220703, 3.218534, 3.042269, 3.099778, 3.198531, 3.290668, 3.075824, 3.226472, 3.145183, 3.550652, 3.285086, 3.217823, 3.467961, 3.209987, 2.99839, 3.327682, 3.132225, 3.360682, 3.378531, 3.392886, 3.56061, 3.290847, 3.373849, 3.259088, 3.23087, 3.532626, 3.434499, 3.477473, 3.464126, 3.488216, 3.557316, 3.535764, 3.518889, 3.352663, 3.550197, 3.582037, 3.570155, 3.631165, 3.708126, 3.667138, 3.845422, 3.539135, 3.73313, 3.908471, 3.573256, 3.824804, 3.852789, 3.913795, 3.890299, 3.993081, 3.757621, 3.846803, 4.315936, 3.813109, 4.02148, 4.058745, 4.162758, 4.098644, 4.291147, 4.208529, 4.361521, 4.18066, 4.391191, 4.245316, 4.247625, 4.369283, 4.136614, 4.147591, 4.696442, 4.596199, 4.584704, 4.545356, 4.431292, 4.573221, 4.482128, 4.45262, 4.773499, 4.460416, 4.800584, 4.835481, 4.698393, 4.779462, 4.934143, 4.900681, 4.70655, 5.158543, 4.843723, 4.994231, 5.114235, 4.920088, 5.145374, 4.757759, 5.113276, 4.956192, 5.217536, 5.099317, 5.020765, 5.33285, 5.221106, 5.411716, 5.309322, 5.268593, 5.258156, 5.496459, 5.5937, 5.401115, 5.50738, 5.554058, 5.664484, 5.461467, 5.881903, 5.541455, 5.748002, 5.528889, 5.647695, 6.036853, 5.663541, 5.714301, 5.897062, 5.693986, 5.933953, 5.841893, 5.988164, 5.943627, 5.894017, 5.956832, 5.878035, 6.09289, 6.022126, 5.706358, 6.056628, 6.038, 5.977207, 5.699425, 5.901327, 5.942275, 6.062376, 6.011763, 6.175461, 6.013299, 6.188832, 6.065805, 5.980319, 6.101125, 6.028895, 6.378204, 6.237455, 6.133614, 6.255148, 6.453836, 6.22962, 6.477671, 6.160803, 6.101404, 6.121202, 6.303411, 6.247949, 6.366866, 6.192016, 6.305697, 6.335246, 6.477219, 6.617644, 6.342926, 6.520439, 6.611902, 6.459433, 6.235854, 6.512325, 6.361984, 6.550327, 6.4147, 6.284216, 6.320281, 6.369892, 6.283319, 6.411901, 6.384285, 6.509079, 6.501694, 6.653689, 6.505974, 6.676736, 6.753477, 6.675066, 6.525217, 6.661132, 6.556785, 6.537916, 6.826396, 6.451086, 6.674473, 6.784053, 6.896007, 6.873359, 6.732657, 6.962358, 6.658253, 7.019548, 6.794559, 6.964217, 7.150504, 6.90804, 6.969765, 7.158124, 7.047669, 6.884072, 7.201585, 7.051984, 7.06721, 6.984394, 7.058733, 7.001346, 7.249425, 7.144656, 7.271743, 7.34915, 7.297344, 7.30229, 7.366858, 7.289526, 7.43243, 7.493738, 7.433785, 7.623976, 7.650726, 7.569803, 7.800667, 7.681048, 7.695612, 7.910473, 7.575367, 7.755771, 7.776073, 8.079781, 7.718268, 7.844855, 7.902319, 8.147534, 7.815646, 8.207781, 8.091081,  };
double measAccelerations[400] = { -0.05973474, -0.05116501, 0.06748129, 0.153249, -0.02969602, 0.1770293, 0.1574007, 0.008741569, -0.2001471, 0.01764384, -0.183348, 0.1133403, -0.08144683, -0.04658325, -0.08735967, 0.1400027, 0.3587591, 0.2297867, 0.3334931, 0.2404479, 0.01458891, 0.26198, 0.1168971, 0.218365, 0.4181535, 0.07240426, 0.4128917, 0.3099768, 0.2095823, 0.2128798, 0.6173552, 0.2368358, 0.1187583, 0.02156991, 0.1449081, 0.30556, 0.4403242, 0.1166954, 0.357623, 0.3276254, 0.2653798, 0.1694731, 0.328649, 0.2415965, 0.1729402, 0.3637196, 0.03440674, 0.06524429, 0.1920631, 0.2135721, 0.07631581, 0.2041012, 0.06696265, 0.2513717, 0.3304191, -0.02383969, 0.2917776, 0.1696789, 0.5488008, 0.3903781, -0.1871303, 0.3580805, 0.05472323, 0.1899453, 0.1550749, 0.2268535, 0.1603543, 0.3973542, -0.06655017, 0.4118052, 0.3785088, 0.1191118, 0.09708125, -0.04986582, 0.1034067, -0.07229187, -0.09758762, -0.1837308, -0.277811, 0.08131485, -0.009494408, -0.2336849, 0.04445302, 0.3041234, 0.05589776, 0.166754, -0.1103528, 0.1758071, -0.08902655, 0.1122577, -0.03496258, -0.2000896, -0.1102564, -0.2478369, -0.1445759, -0.3274155, -0.3525055, -0.2396951, 0.1094511, -0.09161603, -0.1884209, -0.1277037, -0.3803779, -0.2377964, -0.2072514, -0.1552814, -0.1643999, -0.2146779, -0.1551201, -0.4107344, -0.4220352, -0.2938366, -0.2150203, -0.5241469, -0.1222239, -0.08499541, -0.1347959, -0.1434991, -0.5273036, -0.5521599, -0.05810768, -0.1711803, -0.04329311, -0.10061, -0.2733781, -0.2562803, -0.1753677, -0.1747835, -0.09344369, 0.07503456, -0.1053201, -0.2711188, -0.2207894, -0.5276584, -0.4077527, -0.07238743, -0.3288742, -0.2413696, -0.2299637, 0.01815375, -0.337145, 0.07709673, -0.2012299, -0.1094662, -0.2221829, -0.23365, -0.08153228, -0.1918404, -0.3456692, -0.1339617, 0.02563861, -0.2200477, -0.2891419, -0.1391869, -0.1562231, 0.03624707, -0.10261, -0.0329673, -0.06501047, 0.05522966, 0.2317545, -0.1549496, -0.3506232, 0.00660275, -0.1120636, -0.04804869, -0.03431875, 0.03753773, -0.1997402, -0.00185556, 0.2229752, 0.13502, -0.1600347, 0.2765365, -0.01008604, 0.1390429, 0.1939452, 0.2076083, -0.1878001, 0.3056631, 0.0353096, 0.3732131, 0.3204336, 0.3937833, 0.06511958, 0.1372371, 0.1006151, 0.2977645, 0.3797094, 0.1534232, 0.259372, 0.1590883, 0.2510365, 0.2421065, 0.217524, 0.2389086, 0.3783728, 0.1970981, 0.1486966, 0.2642385, 0.09781852, 0.1771245, 0.2291657, 0.2410467, 0.3908816, 0.2783079, 0.4919125, 0.3019834, 0.1963523, 0.2147452, 0.12372, 0.3372187, 0.2240008, 0.02495512, 0.1206369, 0.266077, -0.2041093, 0.2939536, 0.2888693, 0.1364141, 0.2031638, 0.0446652, 0.03023273, 0.3297615, 0.1215082, 0.09677018, -0.1852726, 0.06971387, -0.2587261, -0.02216714, 0.02333723, 0.2207245, 0.2021516, -0.008349845, 0.1812277, -0.06083886, -0.1943942, 0.01666571, 0.1615438, 0.08408713, -0.1298262, -0.159202, -0.1907987, 0.006989252, -0.05820381, -0.2998896, -0.2615764, -0.04536426, -0.07945848, -0.1813007, -0.1641052, -0.0113227, -0.1535984, -0.4935318, -0.2870825, -0.1611649, 0.08964856, -0.2672091, -0.5154544, -0.3861841, -0.3239369, -0.03155948, -0.1177093, -0.07190547, -0.2479003, -0.1398089, -0.3932844, -0.1056182, -0.1292891, -0.1786521, -0.3129595, -0.08760729, -0.2586336, -0.5650853, -0.173987, 0.1108773, -0.41879, -0.3690098, -0.2694071, -0.505065, -0.3221315, -0.1677675, -0.4359335, -0.1593366, -0.2664127, -0.2102798, -0.3148777, -0.3915752, -0.2162581, -0.2976678, -0.6588025, 0.1907422, 0.1270112, -0.1591696, 0.1120849, -0.3248175, -0.3049871, -0.128191, -0.06129905, -0.2176796, -0.1756694, -0.0305274, 0.08025691, -0.2280854, -0.009824074, -0.2107025, -0.09962649, -0.09843803, -0.05127392, 0.09391626, -0.01137452, -0.3324494, 0.1935138, -0.01703685, 0.3002229, 0.05069892, 0.08813854, -0.1335985, 0.007026173, 0.3511798, -0.1503516, 0.04323898, 0.03243731, 0.2897546, 0.1844355, 0.04624552, -0.01497512, 0.05088646, 0.0441491, 0.132278, 0.0531673, 0.06811476, 0.3180194, 0.2209055, 0.3874687, 0.1681159, 0.06548882, 0.1356399, 0.2174013, 0.07802733, 0.2627132, 0.3450362, 0.1337315, 0.4402402, 0.4235033, -0.05124221, 0.0235144, -0.07984313, 0.147682, 0.5181947, 0.2345061, 0.1684459, 0.1678469, 0.3058204, 0.2470715, 0.2533828, -0.01585073, 0.03968764, 0.2587804, 0.3144088, 0.3679531, 0.4080874, 0.5513033, 0.1740046, 0.339097, 0.3822231, 0.2379492, 0.09945633, 0.1343355, -0.08522699, -0.01407848, 0.3049471, 0.06351188, 0.4205885, 0.1347032, 0.04517016, 0.1839993, 0.2570077, 0.228001, 0.1363162, 0.1542077, 0.2335564, 0.1693052, 0.3650754, -0.06596971, 0.2497175, 0.05762746, 0.0752634, 0.0478209, -0.007384054, -0.07594342, -0.150222, 0.1657375, -0.01318884, -0.09198058, -0.1373865, 0.1339104, 0.04385682, -0.2043285, -0.2554308,  };

BLA::Matrix<Nobs> obs;
KALMAN<Nstate,Nobs> K; 
BLA::Matrix<Nstate> state;

Variometer variometer = Variometer();

void setup() 
{   
        Serial.begin(115200);
        Serial.println("Begun");


        K.P = {500.0, 0.0, 0.0,
                0.0, 500.0, 0.0,
                0.0, 0.0, 500.0
        };
        // time evolution matrix
        K.F = {1.0, 0.0, 0.0,
                0.0, 1.0, 0.0,
                0.0, 0.0, 1.0};

        // measurement matrix
        K.H = {1.0, 0.0, 0.0,
                0.0, 0.0, 1.0};
        // measurement covariance matrix
        K.R = {n_p*n_p,   0.0,
                0.0, n_a*n_a};
        // model covariance matrix
        K.Q = {0.0,     0.0,     0.0,
                        0.0, 0.0,     0.0,
                        0.0,     0.0, 0.0};
        
        K.x.Fill(0.0);
        state.Fill(0.0);
        obs.Fill(0.0);
        size_t n = sizeof(times) / sizeof(times[0]);
        /*Serial.print("double[] linearRegressionVel = new double[] {");
        for (size_t i = 0; i < n; i++)
        {
                variometer.addSample(measHeights[i], times[i]);
        }
        Serial.println(" };");*/
        float deltaT = times[1] - times[0];
         K.F = {1.0,  deltaT,  deltaT*deltaT/2,
		0.0, 1.0, deltaT,
                0.0, 0.0, 1.0};
        K.Q = {(deltaT*deltaT*deltaT*deltaT) / 4, (deltaT*deltaT*deltaT) / 3, (deltaT*deltaT) / 2,
                (deltaT*deltaT*deltaT) / 3, (deltaT*deltaT), deltaT,
                (deltaT*deltaT) / 2, deltaT, 1};
        K.Q *= n_r_a * n_r_a;

        Serial.print("double[] KalmanVel = new double[] {");
        for (size_t i = 0; i < n; i++)
        {
                state(0) = measHeights[i];
                state(2) = measAccelerations[i];
                obs = K.H * state;
                K.update(obs);
                Serial.print(String(K.x(1), 7) + ", ");
        }
        Serial.println(" };");
}

void loop()
{

}
