using System;
using System.Collections.Generic;
using Excel = Microsoft.Office.Interop.Excel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TheorieExperiment
{
	class Program
	{


		static void Main(string[] args)
		{
			//vom Arduino
			double[] linearRegressionVel = new double[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.315213, 0, -0.178152, 0, 0.122478, 0, -0.0870809, 0, -0.0492744, 0, 0.00265718, 0, 0.0253369, 0, 0.0674947, 0, 0.0854409, 0, 0.0577979, 0, 0.0659504, 0, 0.0653065, 0, 0.0765228, 0, 0.0806947, 0, 0.0826921, 0, 0.111367, 0, 0.145509, 0, 0.171511, 0, 0.189475, 0, 0.204345, 0, 0.213035, 0, 0.227076, 0, 0.228418, 0, 0.225342, 0.226159, 0.238377, 0.258902, 0.272277, 0.296012, 0.310416, 0.324791, 0.344087, 0.36105, 0.375296, 0.390572, 0.396333, 0.402745, 0.408727, 0.408912, 0.40714, 0.402191, 0.409314, 0.419363, 0.431893, 0.449467, 0.476084, 0.495188, 0.527823, 0.549294, 0.573612, 0.596173, 0.613573, 0.624919, 0.637112, 0.643261, 0.646571, 0.639317, 0.631578, 0.624705, 0.618116, 0.619289, 0.61712, 0.618667, 0.617283, 0.617378, 0.620017, 0.6131, 0.607222, 0.598935, 0.589784, 0.58948, 0.599273, 0.607069, 0.636253, 0.656746, 0.689944, 0.71838, 0.740457, 0.754486, 0.76724, 0.764127, 0.769767, 0.766321, 0.75666, 0.749375, 0.751232, 0.757399, 0.766103, 0.773496, 0.774275, 0.783016, 0.79393, 0.785091, 0.784351, 0.776532, 0.760985, 0.745423, 0.732718, 0.715433, 0.70845, 0.692548, 0.674702, 0.654253, 0.634408, 0.622252, 0.608187, 0.592773, 0.577007, 0.564583, 0.552195, 0.537669, 0.530178, 0.531312, 0.535306, 0.539937, 0.554178, 0.561923, 0.576778, 0.575171, 0.583637, 0.584305, 0.583309, 0.570455, 0.571451, 0.569682, 0.570178, 0.567912, 0.564456, 0.552357, 0.547321, 0.554199, 0.554802, 0.557577, 0.541557, 0.529159, 0.524846, 0.514135, 0.491894, 0.488949, 0.479805, 0.473978, 0.471848, 0.456823, 0.441123, 0.41791, 0.382769, 0.341407, 0.309601, 0.266613, 0.234818, 0.211879, 0.198919, 0.191333, 0.19997, 0.197148, 0.195367, 0.207265, 0.212239, 0.207493, 0.194859, 0.182277, 0.17847, 0.182714, 0.178229, 0.195465, 0.220442, 0.257119, 0.285303, 0.30773, 0.320499, 0.328481, 0.319334, 0.298033, 0.272132, 0.244204, 0.220292, 0.201763, 0.190125, 0.188096, 0.202331, 0.223352, 0.243833, 0.273417, 0.304988, 0.33048, 0.349205, 0.358154, 0.361181, 0.367281, 0.372139, 0.385897, 0.407124, 0.430055, 0.458109, 0.481058, 0.502945, 0.514345, 0.51672, 0.507268, 0.495423, 0.480187, 0.469933, 0.454461, 0.441309, 0.43554, 0.437399, 0.452636, 0.466134, 0.478342, 0.496863, 0.523671, 0.543875, 0.552916, 0.55532, 0.561626, 0.572234, 0.587939, 0.603518, 0.618622, 0.650915, 0.672798, 0.697117, 0.709121, 0.713141, 0.714528, 0.718779, 0.711137, 0.715272, 0.715036, 0.722707, 0.742943, 0.751166, 0.766531, 0.783849, 0.792786, 0.796254, 0.800882, 0.793684, 0.796304, 0.788639, 0.781428, 0.773167, 0.770007, 0.76426, 0.768416, 0.772481, 0.777702, 0.781475, 0.77507, 0.768292, 0.768393, 0.749513, 0.720583, 0.700534, 0.67835, 0.666653, 0.656801, 0.627893, 0.611559, 0.607249, 0.606637, 0.609656, 0.612958, 0.608817, 0.623134, 0.638703, 0.650259, 0.651039, 0.651369, 0.649076, 0.661765, 0.668292, 0.677887, 0.682207, 0.672743, 0.663898, 0.655535, 0.632248, 0.611078, 0.587861, 0.568376, 0.554236, 0.529973, 0.503604, 0.476598, 0.449229, 0.42971, 0.415706, 0.412413, 0.411465, 0.414582, 0.425301, 0.427433, 0.42041, 0.403611, 0.383181, 0.369193, 0.360098, 0.362434, 0.375445, 0.378094, 0.385489, 0.380722, 0.379705, 0.374025, 0.34755, 0.319084, 0.294557, 0.275827, 0.264671, 0.249873, 0.23906, 0.235499, 0.226895, 0.221713, 0.209259, 0.207938, 0.213753, 0.218633, 0.224483, 0.227365, 0.237877, 0.247965, 0.254027, 0.265903, 0.283401, 0.297746, 0.319091, 0.32932, 0.347067, 0.354841, 0.353944, 0.339155, 0.320471, 0.312564, 0.308612, 0.307105, 0.315013, 0.31711, 0.320471, 0.327823, 0.315977, 0.303035, 0.298695, 0.302188, 0.307595, 0.322737, 0.346558, 0.383879, 0.431151, 0.456426, 0.472199, 0.483127, 0.48508, 0.486523, 0.491945, 0.485239, 0.494064, 0.49491, 0.496438, 0.509835, 0.527472, 0.539186, 0.552908, 0.555047, 0.56038, 0.571938, 0.574953, 0.558559, 0.545108, 0.539583, 0.535527, 0.538416, 0.542642, 0.55028, 0.575437, 0.590169, 0.596982, 0.601882, 0.598338, 0.591148, 0.577367, 0.555103, 0.543165, 0.529925, 0.522546, 0.524165, 0.534606, 0.550365, 0.571828, 0.592844, 0.615078, };

			double[] KalmanVel = new double[] { -0.0010377, -1.9520496, 4.0321064, 0.9935236, 2.1399412, 1.2871485, 0.4210085, 0.7109414, 0.2889920, 0.2386395, 0.3572437, 0.1939139, 0.3096242, 0.2038783, 0.2864005, 0.2419930, 0.2047772, 0.1454067, 0.1705794, 0.2045612, 0.2031237, 0.2320334, 0.2122824, 0.2986096, 0.3096728, 0.3140359, 0.3176914, 0.3161094, 0.3167598, 0.3354749, 0.3404875, 0.3301538, 0.3530193, 0.3686567, 0.4000317, 0.4018427, 0.4289275, 0.4463280, 0.4261628, 0.4602622, 0.4711076, 0.4781830, 0.4917671, 0.5133817, 0.5194741, 0.5140959, 0.5208487, 0.5357240, 0.5411850, 0.5598533, 0.5710428, 0.5851441, 0.6002672, 0.6317884, 0.6299728, 0.6589084, 0.6700592, 0.7041540, 0.7068452, 0.7032746, 0.6993154, 0.7012361, 0.7038603, 0.6964369, 0.7084686, 0.6972076, 0.6960797, 0.7072958, 0.7229103, 0.7163160, 0.7272993, 0.7206340, 0.7343864, 0.7375847, 0.7233607, 0.7368897, 0.7323633, 0.7343861, 0.7337496, 0.7461118, 0.7516881, 0.7673030, 0.7513612, 0.7469363, 0.7309150, 0.7157401, 0.7300807, 0.7206418, 0.7098339, 0.7341730, 0.7250578, 0.7078727, 0.7008917, 0.7285342, 0.7178578, 0.7227854, 0.7232631, 0.7120584, 0.6901339, 0.6801102, 0.6724232, 0.6857992, 0.6659983, 0.6523063, 0.6336206, 0.6194423, 0.5913897, 0.5772809, 0.5876954, 0.5568524, 0.5487141, 0.5438020, 0.5481272, 0.5271900, 0.5380088, 0.5076969, 0.4898967, 0.4812857, 0.4584783, 0.4656305, 0.4645902, 0.4591859, 0.4459315, 0.4504813, 0.4195777, 0.4137396, 0.4031722, 0.4035085, 0.3961046, 0.3908764, 0.3687754, 0.3716682, 0.3774478, 0.3833566, 0.3833807, 0.3905967, 0.3616863, 0.3533987, 0.3753296, 0.3569330, 0.3452112, 0.3324568, 0.3411185, 0.3390300, 0.3338030, 0.3272057, 0.3501936, 0.3409424, 0.3267404, 0.3257212, 0.3109523, 0.2910443, 0.2834813, 0.2759086, 0.2563358, 0.2668098, 0.2667897, 0.2568716, 0.2534083, 0.2577520, 0.2651150, 0.2747982, 0.2729810, 0.2602715, 0.2660225, 0.2620864, 0.2558563, 0.2547196, 0.2654991, 0.2632234, 0.2696046, 0.2798212, 0.2967802, 0.3060567, 0.3355520, 0.3278691, 0.3193633, 0.3136938, 0.3141277, 0.3182496, 0.3141006, 0.3167289, 0.3120046, 0.3207508, 0.3220113, 0.3358102, 0.3582553, 0.3724105, 0.4061233, 0.4137519, 0.4341218, 0.4428713, 0.4526009, 0.4682439, 0.4587748, 0.4829301, 0.4861326, 0.5037395, 0.5204668, 0.5358196, 0.5218217, 0.5405830, 0.5525174, 0.5626383, 0.5604949, 0.5661740, 0.5669765, 0.5825914, 0.6004303, 0.6214424, 0.6193966, 0.6192831, 0.6344175, 0.6430507, 0.6673344, 0.6646807, 0.6645662, 0.6659374, 0.6861560, 0.6809641, 0.6751938, 0.6861277, 0.6959480, 0.7092524, 0.7156997, 0.7244154, 0.7453054, 0.7584401, 0.7472408, 0.7537504, 0.7487269, 0.7430360, 0.7618711, 0.7616690, 0.7414712, 0.7530477, 0.7573715, 0.7715515, 0.7902832, 0.7615392, 0.7695510, 0.7710342, 0.7782889, 0.7621576, 0.7566661, 0.7578401, 0.7729270, 0.7639868, 0.7557434, 0.7452013, 0.7371176, 0.7340767, 0.7334875, 0.7218071, 0.7289461, 0.7145380, 0.6866580, 0.6842595, 0.6870601, 0.6487864, 0.6407175, 0.6526612, 0.6329371, 0.6122426, 0.5839982, 0.5736288, 0.5594093, 0.5587598, 0.5771627, 0.5797421, 0.5735222, 0.5390331, 0.5328311, 0.5309941, 0.5223453, 0.5244515, 0.5143424, 0.4942724, 0.5013710, 0.5003955, 0.4902347, 0.4684445, 0.4456698, 0.4310554, 0.4032021, 0.4062365, 0.4112240, 0.3938887, 0.3921813, 0.3796678, 0.3676933, 0.3545873, 0.3387990, 0.3407804, 0.3428496, 0.3354959, 0.3388739, 0.3370269, 0.3296201, 0.3201764, 0.3007824, 0.2911096, 0.2692565, 0.2791377, 0.2556884, 0.2539328, 0.2831481, 0.3033973, 0.2882964, 0.2872292, 0.2742741, 0.2719143, 0.2557826, 0.2405849, 0.2415235, 0.2340879, 0.2521567, 0.2477570, 0.2562469, 0.2601658, 0.2498694, 0.2437594, 0.2330122, 0.2189336, 0.2413637, 0.2619811, 0.2831230, 0.2893379, 0.2943167, 0.3044733, 0.3186564, 0.3320460, 0.3392136, 0.3380012, 0.3391071, 0.3403974, 0.3416477, 0.3546906, 0.3516721, 0.3806926, 0.3695006, 0.3617355, 0.3861034, 0.3956935, 0.4120547, 0.4200137, 0.4323215, 0.4350162, 0.4473647, 0.4566157, 0.4477497, 0.4838763, 0.5034025, 0.5075331, 0.5276000, 0.5419294, 0.5551340, 0.5758495, 0.5564108, 0.5663989, 0.5610597, 0.5610081, 0.5862839, 0.6134180, 0.6197724, 0.6298007, 0.6283770, 0.6399314, 0.6547327, 0.6850459, 0.6908943, 0.6940873, 0.6856317, 0.6826819, 0.6888490, 0.6951240, 0.6885219, 0.6838208, 0.6978685, 0.7011532, 0.6965985, 0.6999824, 0.7049969, 0.7095675, 0.7211295, 0.7174412, 0.7234428, 0.7149605, 0.7007900, 0.6707406, 0.6678656, 0.6766031, 0.6766548, 0.6782948, 0.6714038, 0.6661402, 0.6636986, 0.6704834, 0.6858175, 0.6839520, };

			const double std_a = 0.0069;
			const double std_h = 0.1298;

			const int n = 400;
			const double dT = 0.04;
			double startVelocity = 0.5;
			
			double v = 0;
			double h = 0;
			double a = 0;
			double sumDifference = 0;
			Random rand = new Random();
			List<Tuple<float, float, float, float, float, float, float, Tuple<float>>> allValues = new List<Tuple<float, float, float, float, float, float, float, Tuple<float>>>(); //Zeit //SimHei //SimVel //SimAcce //measHei //measAcce //velLinearRegression //KalmanVel
			for (int i = 0; i < n; i++)
			{
				double time = dT * i;
				a = 0.25 * Math.Sin(time);
				v = -0.25 * Math.Cos(time) + startVelocity;
				h = -0.25 * Math.Sin(time) + startVelocity*time;
				if(time > 2)
					sumDifference += (v - KalmanVel[i]) * (v - KalmanVel[i]);
				//double x = ((double)i / (double)n) * 15.4;
				//a = -0.00000598030247192407 * Math.Pow(x, 6) + 0.000335989279260762 * Math.Pow(x, 5) - 0.00731672013991802 * Math.Pow(x, 4) + 0.076243032770055 * Math.Pow(x, 3) - 0.37462261210635700000 * Math.Pow(x, 2) + 0.711052676821694 * x;
				
				//simAcc[i] = a;
				//simVel[i] = v;
				//h += v * dT + (a * dT * dT)/2;
				//v += a * dT;
				//simHei[i] = h;
				double measAcceleration = randomGauss(rand ,a, std_a);
				//double measAcceleration = a;
				double measHeight = randomGauss(rand, h, std_h);
				//allValues.Add(new Tuple<float, float, float, float, float, float, float, Tuple<float>>((float)i * (float)dT, (float)h, (float)v, (float)a, (float)measHeight, (float)measAcceleration, 0, new Tuple<float>(0)));
				allValues.Add(new Tuple<float, float, float, float, float, float, float, Tuple<float>>((float)i* (float)dT, (float)h, (float)v, (float)a, (float)measHeight, (float)measAcceleration, (float)linearRegressionVel[i], new Tuple<float>((float)KalmanVel[i])));
			}
			Console.WriteLine(Math.Sqrt(sumDifference / n));
			System.Globalization.NumberFormatInfo nfi = new System.Globalization.NumberFormatInfo();
			nfi.NumberDecimalSeparator = ".";
			//Zeiten ausgeben um in Arduino zu kopieren
			Console.Write("double times[" + allValues.Count.ToString() + "] = { ");
			for (int i = 0; i < allValues.Count; i++)
			{
				Console.Write(allValues[i].Item1.ToString(nfi) + ", ");
			}
			Console.WriteLine(" };");

			Console.Write("double measHeights[" + allValues.Count.ToString() + "] = { ");
			for (int i = 0; i < allValues.Count; i++)
			{
				Console.Write(allValues[i].Item5.ToString(nfi) + ", ");
			}
			Console.WriteLine(" };");

			Console.Write("double measAccelerations[" + allValues.Count.ToString() + "] = { ");
			for (int i = 0; i < allValues.Count; i++)
			{
				Console.Write(allValues[i].Item6.ToString(nfi) + ", ");
			}
			Console.WriteLine(" };");
			WriteToExcel(allValues);
			Console.ReadKey();
		}

		static double randomGauss(Random rand, double mean, double stdDev)
		{
			//https://stackoverflow.com/questions/218060/random-gaussian-variables
			double u1 = 1.0 - rand.NextDouble(); //uniform(0,1] random doubles
			double u2 = 1.0 - rand.NextDouble();
			double randStdNormal = Math.Sqrt(-2.0 * Math.Log(u1)) * Math.Sin(2.0 * Math.PI * u2); //random normal(0,1)
			double randomGauss = mean + stdDev * randStdNormal; //random normal(mean,stdDev^2)
			return randomGauss;
		}

		public static void WriteToExcel(List<Tuple<float, float, float, float, float, float, float, Tuple<float>>> values)
		{
			Excel.Application excelApp = new Excel.Application();
			if (excelApp != null)
			{
				Excel.Workbook excelWorkbook = excelApp.Workbooks.Add();
				Excel.Worksheet excelWorksheet = (Excel.Worksheet)excelWorkbook.Sheets.Add();
				excelWorksheet.Cells[1, 1] = "Zeit";
				excelWorksheet.Cells[1, 2] = "SimHei";
				excelWorksheet.Cells[1, 3] = "SimVel";
				excelWorksheet.Cells[1, 4] = "SimAcc";
				excelWorksheet.Cells[1, 5] = "MeasHei";
				excelWorksheet.Cells[1, 6] = "MeasAcc";
				excelWorksheet.Cells[1, 7] = "VelLinearRegression";
				excelWorksheet.Cells[1, 8] = "VelKalman";
				for (int y = 0; y < values.Count; y++)
				{
					excelWorksheet.Cells[y + 3, 1] = values[y].Item1;
					excelWorksheet.Cells[y + 3, 2] = values[y].Item2;
					excelWorksheet.Cells[y + 3, 3] = values[y].Item3;
					excelWorksheet.Cells[y + 3, 4] = values[y].Item4;
					excelWorksheet.Cells[y + 3, 5] = values[y].Item5;
					excelWorksheet.Cells[y + 3, 6] = values[y].Item6;
					excelWorksheet.Cells[y + 3, 7] = values[y].Item7;
					excelWorksheet.Cells[y + 3, 8] = values[y].Rest.Item1;
				}

				/*Excel.Range chartRange;

				Excel.ChartObjects xlCharts = (Excel.ChartObjects)excelWorksheet.ChartObjects(Type.Missing);
				Excel.ChartObject myChart = (Excel.ChartObject)xlCharts.Add(10, 80, 300, 250);
				Excel.Chart chartPage = myChart.Chart;

				chartRange = excelWorksheet.Application.Union(excelWorksheet.get_Range("A3", "A302"), excelWorksheet.get_Range("H3", "H302"));
				chartPage.SetSourceData(chartRange);
				chartPage.ChartType = Excel.XlChartType.xlLine;*/

				excelApp.ActiveWorkbook.SaveAs(@"abc.xlsx");

				excelWorkbook.Close();
				excelApp.Quit();

				System.Runtime.InteropServices.Marshal.FinalReleaseComObject(excelWorksheet);
				System.Runtime.InteropServices.Marshal.FinalReleaseComObject(excelWorkbook);
				System.Runtime.InteropServices.Marshal.FinalReleaseComObject(excelApp);
				GC.Collect();
				GC.WaitForPendingFinalizers();
			}
		}
	}
}
