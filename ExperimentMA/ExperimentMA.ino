#include "LinearRegression.h"
#include "Variometer.h"
#include "FiFo.h"

#include <Kalman.h>
using namespace BLA;

#define Nstate 3 // position, speed, acceleration
#define Nobs 2   // position, acceleration

// measurement std
#define n_p 0.5
#define n_a 0.075
//Process Noise
#define n_r_a 0.1
/*// model std (1/inertia)
#define m_p 5
#define m_s 5
#define m_a 10*/

//vom C# Projekt 
double times[300] = { 0, 0.03, 0.06, 0.09, 0.12, 0.15, 0.18, 0.21, 0.24, 0.27, 0.3, 0.33, 0.36, 0.39, 0.42, 0.45, 0.48, 0.51, 0.54, 0.57, 0.6, 0.63, 0.66, 0.69, 0.72, 0.75, 0.78, 0.81, 0.84, 0.87, 0.9, 0.93, 0.96, 0.9899999, 1.02, 1.05, 1.08, 1.11, 1.14, 1.17, 1.2, 1.23, 1.26, 1.29, 1.32, 1.35, 1.38, 1.41, 1.44, 1.47, 1.5, 1.53, 1.56, 1.59, 1.62, 1.65, 1.68, 1.71, 1.74, 1.77, 1.8, 1.83, 1.86, 1.89, 1.92, 1.95, 1.98, 2.01, 2.04, 2.07, 2.1, 2.13, 2.16, 2.19, 2.22, 2.25, 2.28, 2.31, 2.34, 2.37, 2.4, 2.43, 2.46, 2.49, 2.52, 2.55, 2.58, 2.61, 2.64, 2.67, 2.7, 2.73, 2.76, 2.79, 2.82, 2.85, 2.88, 2.91, 2.94, 2.97, 3, 3.03, 3.06, 3.09, 3.12, 3.15, 3.18, 3.21, 3.24, 3.27, 3.3, 3.33, 3.36, 3.39, 3.42, 3.45, 3.48, 3.51, 3.54, 3.57, 3.6, 3.63, 3.66, 3.69, 3.72, 3.75, 3.78, 3.81, 3.84, 3.87, 3.9, 3.93, 3.96, 3.99, 4.02, 4.05, 4.08, 4.11, 4.14, 4.17, 4.2, 4.23, 4.26, 4.29, 4.32, 4.35, 4.38, 4.41, 4.44, 4.47, 4.5, 4.53, 4.56, 4.59, 4.62, 4.65, 4.68, 4.71, 4.74, 4.77, 4.8, 4.83, 4.86, 4.89, 4.92, 4.95, 4.98, 5.01, 5.04, 5.07, 5.1, 5.13, 5.16, 5.19, 5.22, 5.25, 5.28, 5.31, 5.34, 5.37, 5.4, 5.43, 5.46, 5.49, 5.52, 5.55, 5.58, 5.61, 5.64, 5.67, 5.7, 5.73, 5.76, 5.79, 5.82, 5.85, 5.88, 5.91, 5.94, 5.97, 6, 6.03, 6.06, 6.09, 6.12, 6.15, 6.18, 6.21, 6.24, 6.27, 6.3, 6.33, 6.36, 6.39, 6.42, 6.45, 6.48, 6.51, 6.54, 6.57, 6.6, 6.63, 6.66, 6.69, 6.72, 6.75, 6.78, 6.81, 6.84, 6.87, 6.9, 6.93, 6.96, 6.99, 7.02, 7.05, 7.08, 7.11, 7.14, 7.17, 7.2, 7.23, 7.26, 7.29, 7.32, 7.35, 7.38, 7.41, 7.44, 7.47, 7.5, 7.53, 7.56, 7.59, 7.62, 7.65, 7.68, 7.71, 7.74, 7.77, 7.8, 7.83, 7.86, 7.89, 7.92, 7.95, 7.98, 8.01, 8.04, 8.07, 8.099999, 8.13, 8.16, 8.19, 8.22, 8.25, 8.28, 8.309999, 8.34, 8.37, 8.4, 8.429999, 8.46, 8.49, 8.52, 8.55, 8.58, 8.61, 8.639999, 8.67, 8.7, 8.73, 8.76, 8.79, 8.82, 8.849999, 8.88, 8.91, 8.94, 8.97};
double measHeights[300] = { 0.5157959, 0.4862075, -0.3060471, 0.5047492, -0.4193327, -0.4948714, 0.8856466, 0.2058806, -0.03270033, 0.5401809, -0.06693619, 0.4190238, 0.2283767, -0.6250623, 0.1033589, -0.37315, 0.2980512, -0.8821317, 0.05864724, -0.1984298, 0.3892632, 0.5815014, 0.2558321, -0.1747371, 0.330484, 0.1256466, -0.2825817, -0.3511984, 0.18353, 0.3192987, -0.2540253, -0.4103144, -0.07913149, 0.7181317, 0.7603357, 0.1085137, 0.5838617, -0.1733272, 0.3511401, 0.2122226, 0.4096116, 0.4687526, 0.7504083, -0.3545605, -0.7063066, 0.08127847, 0.424903, -0.656731, -0.585521, -0.3301375, -0.4003064, -0.2036744, 0.7181457, -0.2550472, 0.7450055, -0.3908157, 0.4776665, -0.3198179, 0.5970116, -0.9631448, 0.1415995, -0.05316361, 0.6227819, -0.1248736, 1.00669, 0.6763833, -0.4342953, 0.8849648, 0.3796052, 1.03892, 0.27263, 0.1010567, -0.00835193, 0.507121, -0.7867343, 1.02067, 0.79152, 0.6997815, -0.1173184, 0.1514703, 0.3516252, 0.3343872, 0.8730382, 0.2204468, 0.154571, 0.4023256, 0.2984044, -0.1583624, 0.9855424, 0.45155, 0.2312455, 0.2956134, -0.05915224, 0.5302553, 0.5718951, 0.4498458, 1.039184, 0.6352273, 1.069199, 0.3017156, -0.1263087, 0.9023664, 0.9907178, 1.112538, 1.258669, 1.668842, 0.4841885, 1.293972, 1.832882, 0.4181913, 0.9398093, 0.8272138, 0.466721, 1.123451, 1.095035, 1.523847, 0.5197002, 1.083129, 0.773291, 1.391272, 1.742718, 0.4556449, 0.5542569, -0.1668505, 1.094745, 0.9787533, 0.7109165, 0.422222, 0.8508927, 0.6716942, 1.125514, 0.7082101, 1.859618, 0.9332002, 0.9851519, -0.03143281, 0.9144837, 0.6681044, 0.1802593, 0.890213, 1.653802, -0.1626467, 1.041182, 1.112136, 0.5807388, 1.70465, 0.8682178, 0.7759227, 1.50401, 0.8694394, 1.314964, 1.715159, 0.4667631, 0.9193812, 0.9823266, 1.108273, 0.2786629, 0.7343675, 0.8114471, 1.127339, 1.056939, 0.8389223, 0.9663363, 0.1177176, 0.8348004, 0.8928918, 0.6699582, 1.505467, 0.684164, 1.340479, 1.349902, 0.8931502, 0.813136, 0.309687, 1.607072, 0.9174235, 1.053536, 1.26827, 0.4189363, 1.035576, 0.7497416, 0.8483328, 0.7535786, 2.081084, 0.1382829, 1.170666, 0.2999875, 1.520114, 1.12832, 1.559702, 1.41578, 1.581326, 0.9373575, 1.565553, 0.9656203, 0.8682792, 1.340309, 0.5695862, 1.209189, 1.340633, 0.2384422, 1.480078, 0.9891137, 0.7940759, 1.488754, 0.8953277, 1.023365, 0.1973048, 1.583457, 1.357636, 1.22189, 2.787767, 1.68296, 1.061466, 1.588338, 2.131792, 0.7118664, 1.574991, 1.551972, 1.21796, 1.343092, 1.361768, 1.937178, 2.35963, 0.6129763, 0.7386939, 0.8894955, 1.640261, 1.648022, 1.303521, 1.424703, 2.305593, 0.6942185, 0.6983793, 2.076373, 2.157479, 2.150615, 1.149091, 0.834748, 1.539822, 1.538218, 1.688822, 1.816107, 0.9556238, 1.291514, 2.177798, 1.54777, 1.378914, 2.306619, 2.436367, 2.206362, 1.048606, 2.152098, 1.638455, 1.755224, 2.478448, 1.475058, 2.575775, 1.663489, 2.137523, 2.247967, 1.518826, 2.484838, 2.191348, 1.025324, 2.13638, 2.149647, 2.918507, 1.446314, 2.189871, 1.009667, 1.359733, 1.333916, 1.663389, 2.796081, 2.301969, 2.027226, 2.642045, 2.829009, 2.044415, 1.690325, 1.57739, 2.364974, 2.095061, 2.329226, 1.819602, 1.61441, 2.580568, 2.729519, 2.544816, 2.420255, 2.046618, 3.050038, 2.562734, 1.165028, 2.622262, 1.571102, 2.551707, 2.073613, 2.130068};
double measAccelerations[300] = { -0.07853994, 0.003223727, -0.1253132, 0.04196802, 0.165208, 0.02375798, 0.1368348, 0.1559317, 0.01928535, 0.1682959, 0.1030176, 0.09537321, 0.2014108, 0.1988741, 0.05339934, 0.2662973, 0.05633711, 0.136463, 0.2416613, 0.1333664, 0.1839003, 0.2965363, 0.1539935, 0.2222513, 0.1251921, 0.2046015, 0.3945406, 0.3371066, 0.297208, 0.3229065, 0.3875086, 0.2548939, 0.3840907, 0.2514938, 0.232858, 0.2160114, 0.3812363, 0.3922395, 0.1589312, 0.329892, 0.255448, 0.2053163, 0.2849835, 0.4287569, 0.2173222, 0.2447898, 0.3715426, 0.3053755, 0.1619718, 0.1786156, 0.3429936, 0.2323098, 0.3176383, 0.2047652, 0.3913385, 0.08929829, 0.1336604, 0.04433194, 0.2941934, 0.165566, 0.1141161, 0.1480492, 0.2044758, 0.2638699, 0.09179007, 0.1691283, 0.05552318, 0.2195333, -0.03318946, 0.04283308, 0.07047763, 0.1786056, 0.00859988, -0.04722623, -0.02505938, 0.01374249, -0.05548662, -0.003618802, -0.03985898, 0.05643974, -0.06011202, -0.07010552, -0.04288045, -0.09950062, -0.1578482, -0.09167077, -0.07780664, -0.02960715, -0.1458488, -0.226979, 0.03974162, -0.2815335, -0.220806, -0.1627972, -0.1639566, -0.2356655, -0.1805175, -0.1781701, -0.2267023, -0.2213335, -0.3301319, -0.2353239, -0.154787, -0.2905565, -0.2827296, -0.2880106, -0.3304005, -0.2672639, -0.2733997, -0.305906, -0.1426037, -0.3518779, -0.3341856, -0.3028385, -0.2854253, -0.2508153, -0.2650018, -0.222812, -0.4025667, -0.3422273, -0.2341483, -0.3046459, -0.2369321, -0.2657788, -0.2799663, -0.3572024, -0.3715934, -0.289659, -0.3190795, -0.08688334, -0.2364267, -0.2790123, -0.2306286, -0.2118973, -0.06166806, -0.3355524, -0.2131362, -0.1132534, -0.2173939, -0.1595408, -0.1672895, -0.02962456, -0.07416865, -0.08348445, -0.128996, -0.1540085, -0.07661404, 0.08225098, -0.01632997, -0.06321999, 0.001960217, 0.001286402, 0.2049789, -0.01304733, 0.03064114, 0.1337786, 0.1184317, 0.0801826, 0.2170946, 0.1952268, 0.02797569, 0.1113644, 0.1773064, 0.2053531, 0.1437643, 0.1512236, 0.1162134, 0.2422131, 0.1272566, 0.211119, 0.2812468, 0.2801107, 0.4772839, 0.1524328, 0.278635, 0.3539583, 0.2549816, 0.2525911, 0.234009, 0.1647037, 0.3138809, 0.1909626, 0.3715402, 0.4851864, 0.2972706, 0.1495005, 0.3012691, 0.2822754, 0.2902392, 0.2700277, 0.3166482, 0.2546547, 0.3482191, 0.3479638, 0.3035085, 0.3535126, 0.2992792, 0.2735097, 0.2556243, 0.3323672, 0.4070949, 0.3487608, 0.3130959, 0.1795957, 0.1241291, 0.3389788, 0.1806979, 0.3428636, 0.09859633, 0.1813073, 0.228252, 0.1580115, 0.2774014, 0.2161678, 0.1108117, 0.2173681, 0.22289, 0.1147312, 0.1064591, 0.04627497, 0.09077353, -0.02143702, 0.04265697, -0.0972076, 0.01565049, 0.03298778, 0.08490659, -0.07573917, -0.04758355, -0.01722096, 0.006912407, 0.01500817, 0.01474605, -0.1279688, -0.2072071, -0.2284662, -0.01181554, -0.1731644, -0.2376175, -0.1417778, -0.1716265, -0.1945767, -0.2426417, -0.1930857, -0.2356368, -0.04465422, -0.1672595, -0.2257595, -0.2815576, -0.3474063, -0.2343094, -0.02562871, -0.2326823, -0.2543443, -0.2851505, -0.3247899, -0.1978385, -0.1610776, -0.2780719, -0.3417278, -0.323138, -0.2462444, -0.2793187, -0.3354794, -0.313798, -0.2648225, -0.2659892, -0.1789354, -0.2515948, -0.307003, -0.3576091, -0.3623993, -0.3218137, -0.3475759, -0.3210021, -0.2472167, -0.3498015, -0.1502782, -0.2371041, -0.3191899, -0.06564471, -0.1831518, -0.2065381, -0.1427352, -0.3197402, -0.218928, -0.06655261, -0.1296997, -0.1545058, -0.1396123, -0.1156281, -0.1168989, -0.0834602, -0.1146046, -0.03841906, -0.007924786, 0.02113972, -0.1003752, 0.03381016, 0.05544952};

BLA::Matrix<Nobs> obs;
KALMAN<Nstate,Nobs> K; 
BLA::Matrix<Nstate> state;

Variometer variometer = Variometer();

void setup() 
{   
        Serial.begin(115200);
        Serial.println("Begun");


        K.F = {1.0, 0.0, 0.0,
                0.0, 1.0, 0.0,
                0.0, 0.0, 1.0};


        K.H = {1.0, 0.0, 0.0,
                0.0, 0.0, 1.0};

        K.R = {n_p*n_p,   0.0,
                0.0, n_a*n_a};

        /*K.Q = {m_p*m_p,     0.0,     0.0,
                0.0, m_s*m_s,     0.0,
                0.0,     0.0, m_a*m_a};*/
        K.Q = {0.0,     0.0,     0.0,
                0.0, 0.0,     0.0,
                0.0,     0.0, 0.0};
        
        
        state.Fill(0.0);
        obs.Fill(0.0);
        size_t n = sizeof(times) / sizeof(times[0]);
        Serial.print("double[] linearRegressionVel = new double[] {");
        for (size_t i = 0; i < n; i++)
        {
                variometer.addSample(measHeights[i], times[i]);
        }
        Serial.println(" };");
        /*float deltaT = times[1] - times[0];
        K.F = {1.0,  deltaT,  deltaT*deltaT/2,
                                0.0, 1.0, deltaT,
                        0.0, 0.0, 1.0};
        K.Q = {(deltaT*deltaT*deltaT*deltaT) / 4, (deltaT*deltaT*deltaT) / 3, (deltaT*deltaT) / 2,
                (deltaT*deltaT*deltaT) / 3, (deltaT*deltaT), deltaT,
                (deltaT*deltaT) / 2, deltaT, 1};
        K.Q *= n_r_a * n_r_a;
        Serial.print("double[] KalmanVel = new double[] {");
        for (size_t i = 0; i < n; i++)
        {
                state(0) = measHeights[i];
                state(2) = measAccelerations[i];
                obs = K.H * state;
                K.update(obs);
                Serial.print(String(K.x(1), 7) + ", ");
        }
        Serial.println(" };");*/
}

void loop()
{

}
